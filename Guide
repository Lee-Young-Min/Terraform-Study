레이아웃	페이지_제목	사이드바_전류	설명
가이드
핵심 Terraform 워크플로우 - 가이드
가이드-코어-워크플로우
이 가이드에서는 핵심 Terraform 워크플로우와 그 방법에 대한 개요를 제공합니다. Terraform Open에서 개별, 팀 및 조직 컨텍스트에 적용 소스 및 Terraform Cloud.
핵심 Terraform 워크플로우
핵심 Terraform 워크플로우는 다음 세 단계로 구성됩니다.

Write - 작성자 인프라를 코드로 지정합니다.
Plan - 적용하기 전에 변경 내용을 미리 봅니다.
Apply - 재현 가능한 인프라를 프로비저닝합니다.
이 가이드는 이 세 가지 단계가 컨텍스트에서 어떻게 수행되는지 살펴봅니다. 
개개의 실무자로서 일하는 것, 팀이 있을 때 그들이 어떻게 진화하는지 인프라에 대한 협업 및 Terraform Cloud가 이를 지원하는 방법 전체 조직에서 원활하게 실행되는 워크플로우.

개별 작업자로 작업
먼저 개별 작업으로 이 부품들이 어떻게 조화를 이루는지 살펴보겠습니다. 코드로서 인프라에 대한 정보를 제공합니다.

[Write]
다음 편집기에서 코드를 작성하는 것과 마찬가지로 Terraform 구성을 씁니다. 작업을 제어된 버전에 저장하는 것은 일반적인 관례입니다. 개인으로 운영되는 경우에도 리포지토리를 사용할 수 있습니다.

# Create repository 
$ git init my-infra && cd my-infra

Initialized empty Git repository in /.../my-infra/.git/

# Write initial config
$ vim main.tf

# Initialize Terraform
$ terraform init

Initializing provider plugins...
# ...
Terraform has been successfully initialized!




구성 작성 작업을 진행함에 따라 계획을 반복적으로 실행하는 것이 도움이 될 수 있습니다. 구문 오류를 삭제하고 구성이 현재 통합되어 있는지 확인합니다. 기대한다.

# Make edits to config
$ vim main.tf

# Review plan
$ terraform plan

# Make additional edits, and repeat
$ vim main.tf

이는 개인으로서 애플리케이션 코드에 대해 작업하는 것과 유사하며, 여기에는 타이트한 부분이 있습니다. 코드 편집과 테스트 명령 실행 사이의 피드백 루프가 유용합니다.

[Plan]
쓰기 단계의 피드백 루프가 양호해 보이는 변화를 만들어냈을 때, 이제 여러분의 일을 하고 최종 계획을 검토할 때입니다.

$ git add main.tf
$ git commit -m 'Managing infrastructure as code!'

[master (root-commit) f735520] Managing infrastructure as code!
 1 file changed, 1 insertion(+)
왜냐하면 terraform apply 이전에 확인 계획을 표시합니다. 인프라 변경 진행 중 최종 실행 명령 복습이다.

$ Terraform apply


실행 계획이 생성되었으며 아래와 같습니다.

# …
적용을
마지막으로 확인한 후 Terraform에게 실제 프로비저닝을 요청할 준비가 되었습니다. 사회 기반 시설

다음 작업을 수행하시겠습니까?



  Terraform은 위에서 설명한 작업을 수행합니다.

  '예'만 승인됩니다.

  값 입력: 예


# …


신청완료! 리소스: 1개 추가, 0개 변경, 0개 삭제.
이 때 버전 제어 저장소를 원격으로 푸시하는 것이 일반적입니다. 보관 장소

$ git 원격 추가 원본 https://github.com/*user*/*repo*.git
$ Git 푸시 오리진 마스터
이 코어 워크플로우는 루프입니다. 다음에 변경할 때 시작하십시오. 처음부터 끝까지의 과정

이 워크플로우가 애플리케이션 작성 프로세스와 얼마나 밀접하게 유사하는지 주목 개인으로서의 코드나 스크립트? 이런 얘기를 할 때 이런 뜻이거든요. 인프라를 코드로 지원하는 Terraform입니다.

팀으로 일하기
Terraform 구성에서 여러 사람이 협업하는 경우, 새로운 단계 모든 사용자가 작업 중인지 확인하려면 코어 워크플로우의 각 부분에 추가해야 합니다. 원만하게 함께 이 중 많은 단계가 워크플로우와 병렬로 이루어집니다. 애플리케이션 코드에 대해 작업할 때 발생하는 변경 사항(사용자가 아닌 팀으로 작업할 때) 개인들

쓰다
팀의 각 개인이 여전히 Terraform 구성을 변경할 수 있습니다. 선택한 편집기에서 버전 관리 분기에 대한 변경 내용을 저장합니다. 서로 일이 충돌하지 않도록 지점 근무로 팀 구성 가능 구성원을 사용하여 상호 호환되지 않는 인프라 변경 해결 일반 병합 충돌 워크플로우.

$ Git 체크아웃 -b 애드로드 밸런서


새 분기로 전환된 '애드로드 밸런서'
반복 계획을 실행하는 것은 저작하는 동안 피드백 루프로서 여전히 유용합니다. 구성(각 팀 구성원의 컴퓨터에서 실행할 수 있음) 시간이 지날수록 더 어려워진다. 팀과 인프라가 성장함에 따라 중요한 입력 변수 수(예: API 키, SSL 인증서 쌍)를 수행합니다. 계획을 실행해야 합니다.

각 팀원이 모든 것을 정리하는 부담과 보안 리스크를 피하기 위해 로컬에서 중요한 입력, 팀은 일반적으로 다음 모델로 마이그레이션됩니다. Terraform 작업은 CI(공유 연속 통합)에서 실행됩니다. 환경 이러한 CI 환경을 조성하는 데 필요한 작업은 중요하지 않습니다. 이 핵심 워크플로우 개요의 범위를 벗어나 있지만, 완전히 세부 정보를 제공합니다. 이 주제는 우리의 에서 찾을 수 있다. 자동화에서 Terraform 실행 가이드입니다.

버전 제어에 대한 변경을 커밋하는 이 더 긴 반복 주기 CI 파이프라인이 실행되기를 기다리는 것은 종종 사용을 금지하기에 충분히 길다. 개별 Terraform을 작성하면서 피드백 루프로서의 투기 계획 구성이 변경되었습니다. 새로운 Terraform 이전에도 여전히 유용한 투기 계획 그러나 변경사항은 다음과 같이 본 개발부에 적용되거나 병합된다. 곧 알게 될 거야

계획
인프라에 대해 협업하는 팀을 위해 Terraform의 계획 출력은 다음을 생성합니다. 팀원들이 서로의 작업을 검토할 수 있는 기회 이것은 팀을 허용한다. 잠재적으로 질문하고, 위험을 평가하고, 실수를 발견하기 전에 해로운 변화가 생기다

이러한 검토가 수행되는 자연스러운 장소는 내부 요청과 함께 수행됩니다. 버전 관리--개인이 그들로부터 합병을 제안하는 지점 작업 분기를 공유 팀 분기에 연결합니다. 팀 구성원이 검토 제안된 경우 구성이 투기적 계획 산출물과 함께 변경되면, 그들은 그 계획을 실행하는지 여부를 평가할 수 있다. 계획에 의해 변화의 의도가 달성되고 있다.

문제는 그 팀이 얻을 수 있는 투기적 계획 산출물을 생산해 내는 것이다. 검토. 여전히 테라폼을 현지에서 운영하는 몇몇 팀들은 힘을 끄는 연습을 한다. 요청에는 생성된 투기 계획 산출물의 첨부 사본을 포함해야 합니다. 변경 작성자에 의해. 다른 사람들은 자신의 CI 시스템이 추측을 게시하도록 주선합니다. 자동으로 요청을 끌어오도록 출력을 계획합니다.

Screenshot of Pull Request with manually posted Terraform plan output

저자의 표현을 적절하게 표현하기 위한 계획을 검토하는 것 외에. 의도대로라면 팀도 이런 변화를 원하는지 평가할 수 있다. 지금 일어나다 예를 들어, 팀이 특정 변경사항이 발생할 수 있음을 알아차린 경우 서비스 중단 시 당김 요청의 합병을 연기할 때까지 결정할 수 있습니다. 유지 관리 기간을 예약할 수 있습니다.

적용을
당기기 요청이 승인되고 병합되면 팀에 중요한 역할을 합니다. 공유된 팀 지부를 상대로 실행된 최종 구체적인 계획을 검토하기 위해 최신 버전의 상태 파일

이 계획은 당길 때 검토한 계획과 다를 가능성이 있다. 병합 순서 또는 최근 인프라 변경과 같은 문제로 인해 요청됩니다. 들어 예: 계획이 실행된 이후 인프라를 수동으로 변경한 경우 검토되었습니다. 병합할 때 계획이 다를 수 있습니다.

그 팀이 잠재력을 묻는 것은 바로 이 시점이다. 변경사항 적용의 의미 로부터 서비스 중단이 예상됩니까? 이 변화? 이 변화에서 위험성이 높은 부분이 있나요? 거기에 있습니까. 이걸 적용하면서 우리가 봐야 할 게 있나요? 거기에 있습니까. 이 변화가 일어나고 있다는 걸 알려야 할 사람이 있나요?

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >石 있는 결과 결과>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><1>>>>>>>>>>>>>>>>>>><>>>>>>>>>>>>>>>>>>>>><<<>> << >> << >> << >> << >> << > << >> << >> << >>> << << >>> << << <>>> << << << << <>>>>>> << << << << << << << << <>>>>>>>>>>>>>>> << << << CI에서 테라포름>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>우병우처럼>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Terraform Cloud를 통해 향상된 핵심 워크플로우
위에서 설명한 워크플로우를 통해 안전하고 예측 가능하며 재현 가능한 인프라 생성 또는 변경, 여러 가지 특히 팀 및 팀별로 간소화할 수 있는 협업 포인트 조직이 확장됩니다. Terraform Cloud를 지원 및 향상하도록 설계했습니다. 인프라에 대한 공동 작업을 수행하는 모든 사용자를 위한 핵심 Terraform 워크플로우 소규모 팀과 대규모 조직. Terraform Cloud가 어떻게 구현하는지 살펴보겠습니다. 각 단계마다 더 나은 경험을 할 수 있도록.

쓰다
Terraform Cloud는 중앙 집중식 안전한 저장 위치를 제공합니다. 입력 변수 및 상태와 함께 다음에 대한 엄격한 피드백 루프를 다시 가져옵니다. 구성 작성자에 대한 추측성 계획 Terraform 구성이 상호 작용합니다. "원격" 백엔드를 통해 클라우드를 테라포밍합니다.

테라폼 {
  백엔드 "원격" {
    조직 = "my-org"
    작업영역 {
      접두사 = "my-app-"
    }
  }
}
백엔드를 유선 연결하면 Terraform Cloud API 키가 전부입니다. 팀 구성원이 구성을 편집하고 투기 계획을 실행할 수 있어야 함 저장된 모든 원격 파일을 사용하는 최신 버전의 상태 파일에 대해 입력 변수

$테라폼 작업 공간 선택 my-app-dev
작업 공간 "my-app-dev"로 전환되었습니다.



달러 테라폼 플랜


Terraform Enterprise에서 원격으로 계획 실행.



출력이 여기서 스트리밍됩니다. 브라우저에서 이 계획을 보려면 다음을 방문하십시오.



https://app.terraform.io/my-org/my-app-dev/.../


계획 전에 Terraform 상태 메모리 새로 고침 중...



# …


계획: 추가할 1개, 변경할 0개, 파괴할 0개.
이 계획 산출물의 도움을 받아 팀 구성원은 각각 작업할 수 있습니다. 꺼내기 요청을 통해 변경으로 제안할 준비가 될 때까지 구성 작성

계획
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> <1>에 출연하다.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ◆>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><靑>>>>>>>>>>><>><><<<><<<>>><<<<<>><<<<>>><<<<<>>><<<<<>>>><<<<<<<>>><<<<<<<>>>><<<<<<<<<<>>>>>><<<<<<<<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 당기기>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Screenshot of Pull Request with resource changes in the status update

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>당위법>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>◆>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><靑>→ <靑>→ <靑>→<사진> <<사진>

Screenshot of Pull Request run in Terraform Cloud

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<>을 읽다
<<테라폼 클라우드>>><>><<>><<<>><<<>><<<<>><<<<>>><<<<>>><<<<<<<>>>>><<<<<<<<<<<<>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<< 검토 및 승인

Screenshot of concrete plan

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 만들어졌다

Screenshot of back-and-forth in Terraform Cloud comments

적용(적극적용)>>>>>>>>>>>><<>>>>><<<<<<<>>>>>>><<<<<<<<<>>>>>>><<<<<<<<<<<<>>>>><<<<<<<<<<<>>>>> <<<<<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< >>>>>요.

Screenshot of in-progress Apply

>>>>><<<<>>><<<<<<>><<<<>>><<<<<<>>><<<<<>>>><<<<<<<<<>>>>><<<<<<<<<<>>>>><<<<<<<<<<<<<<<<<>>>>>>>><<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<<<<
테라포름테라포름> <>입니다. 테라포름>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>''''''''''''''''''''''''''''''''''''''''''''''테라포름 클라우드는 이>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> <北京>→ < > < > 이렇게 정해봤습니다.

